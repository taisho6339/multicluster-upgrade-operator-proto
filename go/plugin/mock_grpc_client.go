// Code generated by MockGen. DO NOT EDIT.
// Source: ./go/plugin/plugin_api_grpc.pb.go

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockClusterClient is a mock of ClusterClient interface
type MockClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterClientMockRecorder
}

// MockClusterClientMockRecorder is the mock recorder for MockClusterClient
type MockClusterClientMockRecorder struct {
	mock *MockClusterClient
}

// NewMockClusterClient creates a new mock instance
func NewMockClusterClient(ctrl *gomock.Controller) *MockClusterClient {
	mock := &MockClusterClient{ctrl: ctrl}
	mock.recorder = &MockClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterClient) EXPECT() *MockClusterClientMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method
func (m *MockClusterClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockClusterClientMockRecorder) HealthCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockClusterClient)(nil).HealthCheck), varargs...)
}

// GetVersion mocks base method
func (m *MockClusterClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*ClusterVersion, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*ClusterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockClusterClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockClusterClient)(nil).GetVersion), varargs...)
}

// GetClusterStatus mocks base method
func (m *MockClusterClient) GetClusterStatus(ctx context.Context, in *GetClusterStatusRequest, opts ...grpc.CallOption) (*ClusterStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterStatus", varargs...)
	ret0, _ := ret[0].(*ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStatus indicates an expected call of GetClusterStatus
func (mr *MockClusterClientMockRecorder) GetClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStatus", reflect.TypeOf((*MockClusterClient)(nil).GetClusterStatus), varargs...)
}

// GetOperationStatus mocks base method
func (m *MockClusterClient) GetOperationStatus(ctx context.Context, in *GetOperationStatusRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationStatus", varargs...)
	ret0, _ := ret[0].(*OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationStatus indicates an expected call of GetOperationStatus
func (mr *MockClusterClientMockRecorder) GetOperationStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationStatus", reflect.TypeOf((*MockClusterClient)(nil).GetOperationStatus), varargs...)
}

// ServiceIn mocks base method
func (m *MockClusterClient) ServiceIn(ctx context.Context, in *ServiceInRequest, opts ...grpc.CallOption) (*Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServiceIn", varargs...)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceIn indicates an expected call of ServiceIn
func (mr *MockClusterClientMockRecorder) ServiceIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceIn", reflect.TypeOf((*MockClusterClient)(nil).ServiceIn), varargs...)
}

// ServiceOut mocks base method
func (m *MockClusterClient) ServiceOut(ctx context.Context, in *ServiceOutRequest, opts ...grpc.CallOption) (*Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServiceOut", varargs...)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceOut indicates an expected call of ServiceOut
func (mr *MockClusterClientMockRecorder) ServiceOut(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceOut", reflect.TypeOf((*MockClusterClient)(nil).ServiceOut), varargs...)
}

// UpgradeMaster mocks base method
func (m *MockClusterClient) UpgradeMaster(ctx context.Context, in *MasterVersion, opts ...grpc.CallOption) (*Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeMaster", varargs...)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeMaster indicates an expected call of UpgradeMaster
func (mr *MockClusterClientMockRecorder) UpgradeMaster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeMaster", reflect.TypeOf((*MockClusterClient)(nil).UpgradeMaster), varargs...)
}

// UpgradeNodePool mocks base method
func (m *MockClusterClient) UpgradeNodePool(ctx context.Context, in *NodePoolVersion, opts ...grpc.CallOption) (*Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeNodePool", varargs...)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeNodePool indicates an expected call of UpgradeNodePool
func (mr *MockClusterClientMockRecorder) UpgradeNodePool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeNodePool", reflect.TypeOf((*MockClusterClient)(nil).UpgradeNodePool), varargs...)
}

// MockClusterServer is a mock of ClusterServer interface
type MockClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServerMockRecorder
}

// MockClusterServerMockRecorder is the mock recorder for MockClusterServer
type MockClusterServerMockRecorder struct {
	mock *MockClusterServer
}

// NewMockClusterServer creates a new mock instance
func NewMockClusterServer(ctrl *gomock.Controller) *MockClusterServer {
	mock := &MockClusterServer{ctrl: ctrl}
	mock.recorder = &MockClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterServer) EXPECT() *MockClusterServerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method
func (m *MockClusterServer) HealthCheck(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockClusterServerMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockClusterServer)(nil).HealthCheck), arg0, arg1)
}

// GetVersion mocks base method
func (m *MockClusterServer) GetVersion(arg0 context.Context, arg1 *GetVersionRequest) (*ClusterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*ClusterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockClusterServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockClusterServer)(nil).GetVersion), arg0, arg1)
}

// GetClusterStatus mocks base method
func (m *MockClusterServer) GetClusterStatus(arg0 context.Context, arg1 *GetClusterStatusRequest) (*ClusterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterStatus", arg0, arg1)
	ret0, _ := ret[0].(*ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStatus indicates an expected call of GetClusterStatus
func (mr *MockClusterServerMockRecorder) GetClusterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStatus", reflect.TypeOf((*MockClusterServer)(nil).GetClusterStatus), arg0, arg1)
}

// GetOperationStatus mocks base method
func (m *MockClusterServer) GetOperationStatus(arg0 context.Context, arg1 *GetOperationStatusRequest) (*OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationStatus", arg0, arg1)
	ret0, _ := ret[0].(*OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationStatus indicates an expected call of GetOperationStatus
func (mr *MockClusterServerMockRecorder) GetOperationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationStatus", reflect.TypeOf((*MockClusterServer)(nil).GetOperationStatus), arg0, arg1)
}

// ServiceIn mocks base method
func (m *MockClusterServer) ServiceIn(arg0 context.Context, arg1 *ServiceInRequest) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceIn", arg0, arg1)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceIn indicates an expected call of ServiceIn
func (mr *MockClusterServerMockRecorder) ServiceIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceIn", reflect.TypeOf((*MockClusterServer)(nil).ServiceIn), arg0, arg1)
}

// ServiceOut mocks base method
func (m *MockClusterServer) ServiceOut(arg0 context.Context, arg1 *ServiceOutRequest) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceOut", arg0, arg1)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceOut indicates an expected call of ServiceOut
func (mr *MockClusterServerMockRecorder) ServiceOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceOut", reflect.TypeOf((*MockClusterServer)(nil).ServiceOut), arg0, arg1)
}

// UpgradeMaster mocks base method
func (m *MockClusterServer) UpgradeMaster(arg0 context.Context, arg1 *MasterVersion) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeMaster", arg0, arg1)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeMaster indicates an expected call of UpgradeMaster
func (mr *MockClusterServerMockRecorder) UpgradeMaster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeMaster", reflect.TypeOf((*MockClusterServer)(nil).UpgradeMaster), arg0, arg1)
}

// UpgradeNodePool mocks base method
func (m *MockClusterServer) UpgradeNodePool(arg0 context.Context, arg1 *NodePoolVersion) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeNodePool", arg0, arg1)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeNodePool indicates an expected call of UpgradeNodePool
func (mr *MockClusterServerMockRecorder) UpgradeNodePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeNodePool", reflect.TypeOf((*MockClusterServer)(nil).UpgradeNodePool), arg0, arg1)
}

// mustEmbedUnimplementedClusterServer mocks base method
func (m *MockClusterServer) mustEmbedUnimplementedClusterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterServer")
}

// mustEmbedUnimplementedClusterServer indicates an expected call of mustEmbedUnimplementedClusterServer
func (mr *MockClusterServerMockRecorder) mustEmbedUnimplementedClusterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterServer", reflect.TypeOf((*MockClusterServer)(nil).mustEmbedUnimplementedClusterServer))
}

// MockUnsafeClusterServer is a mock of UnsafeClusterServer interface
type MockUnsafeClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeClusterServerMockRecorder
}

// MockUnsafeClusterServerMockRecorder is the mock recorder for MockUnsafeClusterServer
type MockUnsafeClusterServerMockRecorder struct {
	mock *MockUnsafeClusterServer
}

// NewMockUnsafeClusterServer creates a new mock instance
func NewMockUnsafeClusterServer(ctrl *gomock.Controller) *MockUnsafeClusterServer {
	mock := &MockUnsafeClusterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeClusterServer) EXPECT() *MockUnsafeClusterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedClusterServer mocks base method
func (m *MockUnsafeClusterServer) mustEmbedUnimplementedClusterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterServer")
}

// mustEmbedUnimplementedClusterServer indicates an expected call of mustEmbedUnimplementedClusterServer
func (mr *MockUnsafeClusterServerMockRecorder) mustEmbedUnimplementedClusterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterServer", reflect.TypeOf((*MockUnsafeClusterServer)(nil).mustEmbedUnimplementedClusterServer))
}
